
- name: Ensure base configs directories exists
  file:
    dest: "{{item}}"
    state: directory
  loop:
    - "{{future_configs}}"
    - "{{current_configs_directory}}"
    - "{{current_configs_docker}}"
    - "{{current_configs_bin}}"


- name: Change latest uploaded configs link
  file:
    src: "{{current_configs_directory}}"
    dest: "{{latest_configs}}"
    state: link


- name: Ensure tt services configs directories exists
  file:
    dest: "{{current_configs_docker}}/{{item}}"
    state: directory
  loop: "{{tt_services_configs.keys()}}"


- name: Ensure other services configs directories exists
  file:
    dest: "{{current_configs_docker}}/{{item}}"
    state: directory
  loop:
    - site
    - postgresql
    - redis
    - postfix
    - rabbitmq
    - nginx
    - utils_backup
    - utils_certbot

- name: Render tt service configs
  template:
    src: ../templates/json.j2
    dest: "{{current_configs_docker}}/{{item}}/config.json"
  loop: "{{tt_services_configs.keys()}}"
  vars:
    tt_service: "{{item}}"
    tt_config: "{{tt_services_configs[item]}}"

    full_json:
      database:
        name: "{{tt_service}}"
        user: "{{tt_service}}"
        password: "{{tt_service}}"
        host: "{{postgresql_host}}"
        port: 5432
        minsize: 2
        axsize: 5
        timeout: 60
      log: {level: "{{tt_log_level}}"}
      service: {port: 80}
      custom: "{{tt_config.get('custom', {})}}"

- name: Render postgresql configs
  template:
    src: ../templates/postgresql.conf.j2
    dest: "{{current_configs_docker}}/postgresql/postgresql.prod.conf"

- name: Render nginx configs
  template:
    src: ../templates/json.j2
    dest: "{{current_configs_docker}}/nginx/config.prod.json"
  vars:
    full_json:
      tt_domain: "{{tt_domain}}"
      tt_test_enviroment: false

- name: Render nginx configs
  template:
    src: ../templates/json.j2
    dest: "{{current_configs_docker}}/nginx/config.prod.json"
  vars:
    full_json:
      tt_domain: "{{tt_domain}}"
      tt_test_enviroment: false

- name: Copy nginx configs
  copy:
    src: "{{project_root}}/docker/nginx/{{item}}"
    dest: "{{current_configs_docker}}/nginx/{{item}}"
  loop:
    - templates
    - nginx.conf

- name: Render postfix configs
  template:
    src: ../templates/json.j2
    dest: "{{current_configs_docker}}/postfix/config.prod.json"
  vars:
    full_json:
      domain: "{{tt_domain}}"
      virtual_aliases: {}

- name: Render rabbitmq configs
  template:
    src: ../templates/rabbitmq.conf.j2
    dest: "{{current_configs_docker}}/rabbitmq/rabbitmq.conf"

- name: Render rabbitmq destinations
  template:
    src: ../templates/json.j2
    dest: "{{current_configs_docker}}/rabbitmq/destinations.json"
  vars:
    full_json:
      rabbit_version: "3.9.7"
      rabbitmq_version: "3.9.7"
      bindings: []
      exchanges: []
      global_parameters: []
      parameters: []
      permissions: [{"configure":".*","read":".*","user":"the_tale","vhost":"/the_tale","write":".*"}]
      policies: []
      queues: []
      topic_permissions: []
      users: "{{rabbitmq_users}}"
      vhosts: [{"limits":[],"metadata":{"description":"","tags":[]},"name":"/the_tale"}]

- name: Render the_tale settings_local.py
  template:
    src: ../templates/the_tale_settings_local.py.j2
    dest: "{{current_configs_docker}}/site/settings_local.py"

- name: Render backup config
  template:
    src: ../templates/aws.config.j2
    dest: "{{current_configs_docker}}/utils_backup/aws.config"
  vars:
    aws_region: "{{backup_aws_region}}"
    aws_access_key_id: "{{backup_aws_access_key_id}}"
    aws_secret_access_key: "{{backup_aws_secret_access_key}}"

- name: Render certbot config
  template:
    src: ../templates/certbot_cli.ini.j2
    dest: "{{current_configs_docker}}/utils_certbot/cli.ini"

- name: Copy compose configs
  copy:
    src: "{{project_root}}/docker/{{item}}"
    dest: "{{current_configs_docker}}/{{item}}"
  loop:
    - docker-compose.base.yml
    - docker-compose.prod.yml

- name: Copy base utilities
  copy:
    src: "{{project_root}}/bin/{{item}}"
    dest: "{{current_configs_bin}}/{{item}}"
    mode: u+rwx
  loop:
    - docker_compose.sh
    - docker_compose_pull.sh
    - defaults.env

- name: Copy utilities
  copy:
    src: "{{item}}"
    dest: "{{current_configs_bin}}/{{item|basename}}"
    mode: u+rwx
  with_fileglob:
    - "{{project_root}}/bin/tt_*"

- name: Render redefined variables
  template:
    src: ../templates/variables.env.j2
    dest: "{{current_configs_bin}}/variables.env"
