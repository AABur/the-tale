
- name: "preinstall {{name}}"
  hosts: all
  become: yes
  become_user: root
  tasks:
    - name: "create {{name}} user"
      user: "name={{user}}"

    - name: configure database
      postgresql_db:
        name: "{{user}}"
        login_user: postgres

    - name: configure database user
      postgresql_user:
        db: "{{user}}"
        name: "{{user}}"
        password: "{{user}}"
        priv: ALL
        role_attr_flags: "NOSUPERUSER,NOCREATEROLE,NOINHERIT,LOGIN,NOREPLICATION,{%if tt_test_enviroment%}CREATEDB{%else%}NOCREATEDB{%endif%}"
        login_user: postgres

    - name: create {{name}} static files directory
      file: "path=/var/www/{{user}} state=directory mode=0755 owner={{user}} group={{user}}"


- name: "install {{name}}"
  hosts: all
  become: yes
  become_user: "{{user}}"
  tasks:

    # use only if python version changed
    # - name: remove virtual environment
    #   shell: rm -rf "/home/{{user}}/current/venv"

    - name: create environment and install helpfull packages
      pip:
        name: "{{item.name}}"
        virtualenv: "/home/{{user}}/current/venv"
        virtualenv_command: "{{tt_python_venv_command}}"
        extra_args: "--upgrade"
      with_items:
        - {name: "pip"}
        - {name: "ipython"}

    - name: install other python packages
      pip:
        name: "{{item.name}}"
        virtualenv: "/home/{{user}}/current/venv"
        virtualenv_command: "{{tt_python_venv_command}}"
        editable: "{{item.editable}}"
        extra_args: "{{item.extra}}"
      with_items: "{{packages}}"

    - name: install packages for test environment
      pip:
        name: "{{item.name}}"
        virtualenv: "/home/{{user}}/current/venv"
        virtualenv_command: "{{tt_python_venv_command}}"
      with_items:
        - {name: django-test-without-migrations}
      when: tt_test_enviroment

    - name: install settings.py
      template:
        src: "{{tt_services[user]['settings_local']}}"
        dest: "/home/{{user}}/current/venv/lib/{{tt_python}}/site-packages/the_tale/settings_local.py"
        mode: 0644
        owner: "{{user}}"
        group: "{{user}}"

      when: tt_services[user].get('settings_local') is not none

    - name: run migrations
      raw: "cd /home/{{user}}/current && . /home/{{user}}/current/venv/bin/activate && django-admin migrate --noinput --settings {{django_settings}}"

    - name: collect {{name}} static files
      raw: "cd /home/{{user}}/current && . /home/{{user}}/current/venv/bin/activate && django-admin collectstatic --noinput --settings {{django_settings}}"
      when: collect_static|bool


- name: "postinstall {{name}}"
  hosts: all
  become: yes
  become_user: root
  tasks:

    - name: "create {{name}} logs directory"
      file: "path=/var/log/{{user}} state=directory mode=0755 owner={{user}} group={{user}}"

    - name: "create {{name}} config directory"
      file: "path=/etc/{{user}} state=directory mode=0755 owner={{user}} group={{user}}"

    - name: "install {{name}} configs"
      template:
        src: ../templates/tt_service.json
        dest: "/etc/{{user}}/config.json"
        mode: 0644
        owner: "{{user}}"
        group: "{{user}}"

    - name: "install {{name}} authorized keys"
      authorized_key:
        user: "{{user}}"
        key: "{{item}}"
      with_items: "{{tt_authorized_keys}}"
