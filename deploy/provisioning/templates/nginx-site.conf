

{% macro gzip() %}
        gzip on;
        gzip_proxied any;
        gzip_http_version 1.0;
        gzip_types *;
        gzip_vary on;
{% endmacro %}

server {
    server_name www.{{tt_domain}};
    return 301 https://{{tt_domain}}$request_uri;
}

server {
    listen        80;
    server_name   {{tt_domain}};
    return 301 https://{{tt_domain}}$request_uri;
}

server {
        listen        443 ssl http2;
        server_name   {{tt_domain}};

        ssl_certificate     /etc/letsencrypt/live/{{tt_domain}}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{tt_domain}}/privkey.pem;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;

        resolver 8.8.8.8;

        charset  utf-8;
        source_charset utf-8;

        {{ gzip() }}

        keepalive_requests 10000;
        keepalive_timeout 125s;

        proxy_buffers 16 4k;

        # hack for django bug with reseting csrf-token on favicon request
        location /favicon.ico {
                 return 404;
        }

        location / {
            if (-f /var/www/the_tale/maintenance.html) {
                   return 503;
            }

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://127.0.0.1:8000/;
        }

        {% if not tt_test_enviroment %}
        location /static/ {
            if (-f /var/www/the_tale/maintenance.html) {
                   return 503;
            }
            root         /var/www/the_tale/;
            access_log   off;
            expires      30d;
        }
        {% endif %}

        location =/robots.txt {
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /admin/\n";
        }

        error_page 503 /maintenance.html;
        location =/maintenance.html {
            root /var/www/the_tale;
            internal;
        }
}

server {
    listen        80;
    server_name   temp-informer.{{tt_domain}};
    return 301 https://temp-informer.{{tt_domain}}$request_uri;
}

server {
    listen    443 ssl http2;

    server_name   temp-informer.{{tt_domain}};

    ssl_certificate     /etc/letsencrypt/live/temp-informer.{{tt_domain}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/temp-informer.{{tt_domain}}/privkey.pem;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    {{ gzip() }}

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://37.252.124.176/thetale;
    }
}

server {
    listen        80;
    server_name   docs.{{tt_domain}};
    return 301 https://docs.{{tt_domain}}$request_uri;
}

server {
     listen        443 ssl http2;

     server_name docs.{{tt_domain}};

     ssl_certificate     /etc/letsencrypt/live/docs.{{tt_domain}}/fullchain.pem;
     ssl_certificate_key /etc/letsencrypt/live/docs.{{tt_domain}}/privkey.pem;
     ssl_session_cache   shared:SSL:10m;
     ssl_session_timeout 10m;

     resolver 8.8.8.8;

     charset  utf-8;
     source_charset utf-8;

     {{ gzip() }}

     keepalive_requests 10000;
     keepalive_timeout 125s;

     proxy_buffers 16 4k;

     location / {
         proxy_pass https://tt-docs.readthedocs.io:443;
         proxy_set_header Host $http_host;
         proxy_set_header X-Forwarded-Proto https;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Scheme $scheme;
         proxy_set_header X-RTD-SLUG pip;
         proxy_connect_timeout 10s;
         proxy_read_timeout 20s;
     }
 }

server {
       listen        80;
       server_name   localhost;

       location /nginx-status {
            stub_status;
        }
}