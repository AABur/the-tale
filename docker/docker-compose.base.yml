version: "3.9"

x-tt-service:
  &default-tt-service

  build:
    &default-tt-service-build
    context: ../
    dockerfile: ./docker/tt_service/Dockerfile

  ports:
    - "80"

  command: tt_run_service

  stop_grace_period: 1s

  environment:
    TT_WAIT_TIMEOUT: $TT_WAIT_TIMEOUT

  volumes:
    - ${PWD}:/home/tt_service/repository

  depends_on:
    - core-postgresql

  profiles:
    - services

  networks:
    tt_network: {}

x-the-tale:
  &default-the-tale

  build:
    context: ../
    dockerfile: ./docker/the_tale/Dockerfile

  stop_grace_period: 1s

  environment:
    TT_WAIT_TIMEOUT: $TT_WAIT_TIMEOUT

  volumes:
    - ${PWD}:/home/tt_service/repository

  image: the-tale/the-tale:latest

  depends_on:
    - core-postgresql
    - core-redis
    - core-rabbitmq

  networks:
    tt_network: {}

x-the-tale-worker:
  &default-the-tale-worker
  << : *default-the-tale
  command: tt_worker

  stop_grace_period: 10s

  profiles:
    - workers

  depends_on:
    - utils-site-migrations


networks:
  tt_network:
    driver: bridge


volumes:
  tt_nginx_sertificates: {}


services:

  core-postgresql:

    image: the-tale/core-postgresql:$TT_ENV-$TT_VERSION

    build:
      context: ./postgresql

    image: the-tale/postgresql:latest

    volumes:
       - ${PWD}/docker/postgresql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
       - ${PWD}/docker/postgresql/postgresql.$TT_ENV.conf:/etc/postgresql/postgresql.conf:ro

    ports:
      - "5432"

    stop_grace_period: 1m

    environment:
      TT_DATABASES: $TT_DATABASES

    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

    networks:
      tt_network: {}

  utils-backup:

    image: the-tale/utils-backup:$TT_ENV-$TT_VERSION

    build:
      context: ./utils_backup

    volumes:
       - ${PWD}/docker/utils_backup/aws.config:/root/aws.config:ro
       - ${PWD}/.backups:/backups/

    stop_grace_period: 1m

    environment:
      TT_DATABASES: $TT_DATABASES
      TT_S3_BACKET: "s3 backet name"

    depends_on:
      - core-postgresql

    networks:
      tt_network: {}

    profiles:
      - utils

  core-redis:

    image: the-tale/core-redis:$TT_ENV-$TT_VERSION

    build:
      context: ./redis

    stop_grace_period: 1m

    ports:
      - "6379"

    networks:
      tt_network: {}

  core-rabbitmq:

    image: the-tale/core-rabbitmq:$TT_ENV-$TT_VERSION

    build:
      context: ./rabbitmq

    stop_grace_period: 1m

    ports:
      - "5672"

    volumes:
       - ${PWD}/docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
       - ${PWD}/docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro

    networks:
      tt_network: {}

  core-nginx:

    image: the-tale/core-nginx:$TT_ENV-$TT_VERSION

    build:
      context: ./nginx

    environment:
      TT_SERVERS: "site temp_informer xsolla localhost"

    stop_grace_period: 1s

    volumes:
      - ${PWD}/docker/nginx/templates:/nginx-config-templates:ro
      - ${PWD}/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${PWD}/docker/nginx/config.$TT_ENV.json:/root/nginx_config.json
      - tt_nginx_sertificates:/etc/nginx/certificates/

    # command: [nginx-debug, '-g', 'daemon off;']

    ports:
      - "80:80"
      - "443:443"

    networks:
      tt_network: {}

  # base image for tt services
  tt-base:
    build:
      context: ../
      dockerfile: ./docker/common/Dockerfile

    image: the-tale/tt-base:$TT_ENV-$TT_VERSION

    entrypoint: []

    profiles:
      - base_images

    networks:
      tt_network: {}

  tt-diary:
    << : *default-tt-service

    image: the-tale/tt-diary:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_diary
        - TT_PACKAGE=tt_diary

  tt-personal-messages:
    << : *default-tt-service

    image: the-tale/tt-personal-messages:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_personal_messages
        - TT_PACKAGE=tt_personal_messages

  tt-storage:
    << : *default-tt-service

    image: the-tale/tt-storage:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_storage
        - TT_PACKAGE=tt_storage

  tt-market:
    << : *default-tt-service

    image: the-tale/tt-market:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_market
        - TT_PACKAGE=tt_market

  tt-players-timers:
    << : *default-tt-service

    image: the-tale/tt-players-timers:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_players_timers
        - TT_PACKAGE=tt_timers

  tt-personal-impacts:
    << : *default-tt-service

    image: the-tale/tt-personal-impacts:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_personal_impacts
        - TT_PACKAGE=tt_impacts

  tt-crowd-impacts:
    << : *default-tt-service

    image: the-tale/tt-crowd-impacts:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_crowd_impacts
        - TT_PACKAGE=tt_impacts

  tt-job-impacts:
    << : *default-tt-service

    image: the-tale/tt-job-impacts:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_job_impacts
        - TT_PACKAGE=tt_impacts

  tt-fame-impacts:
    << : *default-tt-service

    image: the-tale/tt-fame-impacts:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_fame_impacts
        - TT_PACKAGE=tt_impacts

  tt-game-chronicle:
    << : *default-tt-service

    image: the-tale/tt-game-chronicle:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_game_chronicle
        - TT_PACKAGE=tt_events_log

  tt-clans-chronicle:
    << : *default-tt-service

    image: the-tale/tt-clans-chronicle:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_clans_chronicle
        - TT_PACKAGE=tt_events_log

  tt-money-spendings:
    << : *default-tt-service

    image: the-tale/tt-money-spendings:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_money_spendings
        - TT_PACKAGE=tt_impacts

  tt-emissaries-impacts:
    << : *default-tt-service

    image: the-tale/tt-emissaries-impacts:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_emissaries_impacts
        - TT_PACKAGE=tt_impacts

  tt-players-properties:
    << : *default-tt-service

    image: the-tale/tt-players-properties:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_players_properties
        - TT_PACKAGE=tt_properties

  tt-clans-properties:
    << : *default-tt-service

    image: the-tale/tt-clans-properties:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_clans_properties
        - TT_PACKAGE=tt_properties

  tt-matchmaker:
    << : *default-tt-service

    image: the-tale/tt-matchmaker:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_matchmaker
        - TT_PACKAGE=tt_matchmaker

  tt-places-effects:
    << : *default-tt-service

    image: the-tale/tt-places-effects:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_places_effects
        - TT_PACKAGE=tt_effects

  tt-clans-currencies:
    << : *default-tt-service

    image: the-tale/tt-clans-currencies:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_clans_currencies
        - TT_PACKAGE=tt_bank

  tt-emissaries-events-currencies:
    << : *default-tt-service

    image: the-tale/tt-emissaries-events-currencies:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_emissaries_events_currencies
        - TT_PACKAGE=tt_bank

  tt-emissaries-events-uniquer:
    << : *default-tt-service

    image: the-tale/tt-emissaries-events-uniquer:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_emissaries_events_uniquer
        - TT_PACKAGE=tt_uniquer

  tt-discord:
    << : *default-tt-service

    image: the-tale/tt-discord:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_discord
        - TT_PACKAGE=tt_discord

  tt-data-protector:
    << : *default-tt-service

    image: the-tale/tt-data-protector:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_data_protector
        - TT_PACKAGE=tt_data_protector

  tt-xsolla:
    << : *default-tt-service

    image: the-tale/tt-xsolla:$TT_ENV-$TT_VERSION

    build:
      << : *default-tt-service-build
      args:
        - TT_SERVICE=tt_xsolla
        - TT_PACKAGE=tt_xsolla

  utils-site-migrations:
    << : *default-the-tale

    profiles:
      - utils

    command: tt_django migrate

  site:
    << : *default-the-tale

    command: tt_site -b 0.0.0.0:80 -w 4

    ports:
      - "80"

    profiles:
      - site

    depends_on:
      - core-nginx
      - utils-site-migrations

  utils-site:
    << : *default-the-tale

    profiles:
      - utils

    depends_on:
      - utils-site-migrations

  utils-regenerate-protocol:

    build:
      context: ../
      dockerfile: ./docker/utils_regenerate_protocol/Dockerfile

    volumes:
      - ${PWD}:/home/tt_service/repository

    command: tt_regenerate_protocol

    networks:
      tt_network: {}

    profiles:
      - utils

  worker-bank-processor:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: bank_processor

  worker-xsolla-banker:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: xsolla_banker

  worker-refrigerator:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: refrigerator

  worker-message-sender:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: message_sender

  worker-items-manager:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: items_manager

  worker-linguistics-manager:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: linguistics_manager

  worker-achievements-manager:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: achievements_manager

    depends_on:
      - worker-items-manager

  worker-turns-loop:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: turns_loop

  worker-logic-1:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: logic_1

    # service can be stopped only by worker_supervisor
    stop_grace_period: 8760h

  worker-logic-2:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: logic_2

    # service can be stopped only by worker_supervisor
    stop_grace_period: 8760h

  worker-quests-generator:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: quests_generator

  worker-quests-generator:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: quests_generator

  worker-supervisor:
    << : *default-the-tale-worker
    environment:
      TT_WORKER: supervisor

    stop_grace_period: 1h

    depends_on:
      - worker-logic-1
      - worker-logic-2
