
import math
import asyncio

from aiohttp import test_utils

from tt_web import postgresql as db

from .. import objects
from .. import operations

from . import helpers


class AddImpactsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        await operations.add_impacts(impacts=[])

        results = await db.sql('SELECT * FROM impacts')

        self.assertEqual(len(results), 0)

    @test_utils.unittest_run_loop
    async def test_success(self):
        impact = helpers.test_impact()

        await operations.add_impacts(impacts=[impact])

        results = await db.sql('SELECT * FROM impacts')

        self.assertEqual(len(results), 1)

        impact.time = results[0]['created_at'].replace(tzinfo=None)

        self.assertEqual(impact, operations.impact_from_row(results[0]))

    @test_utils.unittest_run_loop
    async def test_update_actor_impact(self):
        impact = helpers.test_impact()

        await operations.add_impacts(impacts=[impact])

        results = await db.sql('SELECT * FROM actors_impacts')

        self.assertEqual(len(results), 1)

        actor_impact = objects.ActorImpact(actor=impact.actor,
                                           target=impact.target,
                                           amount=impact.amount,
                                           turn=impact.turn,
                                           time=results[0]['updated_at'].replace(tzinfo=None))

        self.assertEqual(actor_impact, operations.actor_impact_from_row(results[0]))

    @test_utils.unittest_run_loop
    async def test_update_target_impact(self):
        impact = helpers.test_impact()

        await operations.add_impacts(impacts=[impact])

        results = await db.sql('SELECT * FROM targets_impacts')

        self.assertEqual(len(results), 1)

        actor_impact = objects.TargetImpact(target=impact.target,
                                            amount=impact.amount,
                                            turn=impact.turn,
                                            time=results[0]['updated_at'].replace(tzinfo=None))

        self.assertEqual(actor_impact, operations.target_impact_from_row(results[0]))

    @test_utils.unittest_run_loop
    async def test_multiple_impacts(self):
        impacts = [helpers.test_impact(actor_type=1, actor_id=10, target_type=100, target_id=1000, amount=6),
                   helpers.test_impact(actor_type=1, actor_id=10, target_type=200, target_id=2000, amount=66),
                   helpers.test_impact(actor_type=2, actor_id=10, target_type=200, target_id=1000, amount=666),
                   helpers.test_impact(actor_type=1, actor_id=20, target_type=100, target_id=2000, amount=6666),
                   helpers.test_impact(actor_type=1, actor_id=20, target_type=200, target_id=1000, amount=66666),
                   helpers.test_impact(actor_type=2, actor_id=20, target_type=200, target_id=2000, amount=666666),

                   helpers.test_impact(actor_type=1, actor_id=10, target_type=200, target_id=2000, amount=6666666),
                   helpers.test_impact(actor_type=2, actor_id=20, target_type=200, target_id=2000, amount=-66666666),
                   helpers.test_impact(actor_type=1, actor_id=20, target_type=100, target_id=2000, amount=666666666)]

        await operations.add_impacts(impacts)

        # check impacts log
        results = await db.sql('SELECT * FROM impacts')

        self.assertEqual(len(results), 9)

        for impact, row in zip(impacts, results):
            impact.time = row['created_at'].replace(tzinfo=None)

        self.assertCountEqual(impacts, [operations.impact_from_row(row) for row in results])

        # check actors impacts
        results = await db.sql('SELECT * FROM actors_impacts')

        self.assertEqual(len(results), 6)

        expected_impacts = [objects.ActorImpact(actor=objects.Object(1, 10), target=objects.Object(100, 1000), amount=6,
                                                turn=impacts[0].turn, time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.ActorImpact(actor=objects.Object(1, 10), target=objects.Object(200, 2000), amount=66+6666666,
                                                turn=max(impacts[1].turn, impacts[6].turn),
                                                time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.ActorImpact(actor=objects.Object(2, 10), target=objects.Object(200, 1000), amount=666,
                                                turn=impacts[2].turn, time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.ActorImpact(actor=objects.Object(1, 20), target=objects.Object(100, 2000), amount=6666+666666666,
                                                turn=max(impacts[3].turn, impacts[8].turn),
                                                time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.ActorImpact(actor=objects.Object(1, 20), target=objects.Object(200, 1000), amount=66666,
                                                turn=impacts[4].turn, time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.ActorImpact(actor=objects.Object(2, 20), target=objects.Object(200, 2000), amount=666666-66666666,
                                                turn=max(impacts[5].turn, impacts[7].turn),
                                                time=results[0]['updated_at'].replace(tzinfo=None))]

        self.assertCountEqual(expected_impacts, [operations.actor_impact_from_row(row) for row in results])

        # check targets impacts
        results = await db.sql('SELECT * FROM targets_impacts')

        self.assertEqual(len(results), 4)

        expected_impacts = [objects.TargetImpact(target=objects.Object(100, 1000), amount=6,
                                                 turn=impacts[0].turn, time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.TargetImpact(target=objects.Object(100, 2000), amount=6666+666666666,
                                                 turn=max(impacts[3].turn, impacts[8].turn),
                                                 time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.TargetImpact(target=objects.Object(200, 1000), amount=666+66666,
                                                 turn=max(impacts[2].turn, impacts[4].turn),
                                                 time=results[0]['updated_at'].replace(tzinfo=None)),
                            objects.TargetImpact(target=objects.Object(200, 2000), amount=66+666666+6666666-66666666,
                                                 turn=max(impacts[1].turn, impacts[5].turn, impacts[6].turn, impacts[7].turn),
                                                 time=results[0]['updated_at'].replace(tzinfo=None))]

    @test_utils.unittest_run_loop
    async def test_concurrent_updates(self):
        impacts_bundles = []

        N = 100

        for i in range(N):
            impacts_bundles.append([helpers.test_impact(actor_type=1, actor_id=10, target_type=100, target_id=1000, amount=1),
                                    helpers.test_impact(actor_type=1, actor_id=10, target_type=100, target_id=2000, amount=10),
                                    helpers.test_impact(actor_type=1, actor_id=20, target_type=100, target_id=1000, amount=100),
                                    helpers.test_impact(actor_type=-i, target_type=-1)])

        tasks = [operations.add_impacts(bundle) for bundle in impacts_bundles]

        await asyncio.gather(*tasks)

        results = await db.sql('SELECT * FROM actors_impacts WHERE actor_type=1 AND actor=10 AND target_type=100 AND target=1000')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0]['amount'], N)

        results = await db.sql('SELECT * FROM actors_impacts WHERE actor_type=1 AND actor=10 AND target_type=100 AND target=2000')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0]['amount'], N*10)

        results = await db.sql('SELECT * FROM targets_impacts WHERE target_type=100 AND target=1000')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0]['amount'], N+N*100)

        results = await db.sql('SELECT * FROM targets_impacts WHERE target_type=100 AND target=2000')
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0]['amount'], N*10)


class LastImpactsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        impacts = await operations.last_impacts(limit=100)
        self.assertEqual(len(impacts), 0)

    @test_utils.unittest_run_loop
    async def test_success(self):
        impacts = [helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact()]

        for impact in impacts:
            await operations.add_impacts([impact])

        existed_impacts = await operations.last_impacts(limit=100)

        for impact, existed_impact in zip(reversed(impacts), existed_impacts):
            impact.time = existed_impact.time
            self.assertEqual(impact, existed_impact)

    @test_utils.unittest_run_loop
    async def test_limit(self):
        impacts = [helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact()]

        for impact in impacts:
            await operations.add_impacts([impact])

        existed_impacts = await operations.last_impacts(limit=3)

        for impact, existed_impact in zip(reversed(impacts[-3:]), existed_impacts):
            impact.time = existed_impact.time
            self.assertEqual(impact, existed_impact)


class LastActorImpactsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        await operations.add_impacts([helpers.test_impact(actor_type=-1)])
        impacts = await operations.last_actor_impacts(objects.Object(1, 2), limit=100)
        self.assertEqual(len(impacts), 0)

    @test_utils.unittest_run_loop
    async def test_success(self):
        impacts = [helpers.test_impact(actor_type=1, actor_id=3, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=2, amount=2),
                   helpers.test_impact(actor_type=2, actor_id=2, amount=3),
                   helpers.test_impact(actor_type=1, actor_id=2, amount=4)]

        for impact in impacts:
            await operations.add_impacts([impact])

        found_impacts = await operations.last_actor_impacts(objects.Object(1, 2), limit=100)

        impacts[1].time = found_impacts[1].time
        impacts[3].time = found_impacts[0].time

        self.assertEqual([impacts[3], impacts[1]], found_impacts)

    @test_utils.unittest_run_loop
    async def test_limit(self):
        impacts = [helpers.test_impact(actor_type=1, actor_id=2, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=2, amount=2),
                   helpers.test_impact(actor_type=1, actor_id=2, amount=3),
                   helpers.test_impact(actor_type=1, actor_id=2, amount=4)]

        for impact in impacts:
            await operations.add_impacts([impact])

        found_impacts = await operations.last_actor_impacts(objects.Object(1, 2), limit=2)

        impacts[2].time = found_impacts[1].time
        impacts[3].time = found_impacts[0].time

        self.assertEqual([impacts[3], impacts[2]], found_impacts)


class LastTargetImpactsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        await operations.add_impacts([helpers.test_impact(target_type=-1)])
        impacts = await operations.last_target_impacts(objects.Object(1, 2), limit=100)
        self.assertEqual(len(impacts), 0)

    @test_utils.unittest_run_loop
    async def test_success(self):
        impacts = [helpers.test_impact(target_type=1, target_id=3, amount=1),
                   helpers.test_impact(target_type=1, target_id=2, amount=2),
                   helpers.test_impact(target_type=2, target_id=2, amount=3),
                   helpers.test_impact(target_type=1, target_id=2, amount=4)]

        for impact in impacts:
            await operations.add_impacts([impact])

        found_impacts = await operations.last_target_impacts(objects.Object(1, 2), limit=100)

        impacts[1].time = found_impacts[1].time
        impacts[3].time = found_impacts[0].time

        self.assertEqual([impacts[3], impacts[1]], found_impacts)

    @test_utils.unittest_run_loop
    async def test_limit(self):
        impacts = [helpers.test_impact(target_type=1, target_id=2, amount=1),
                   helpers.test_impact(target_type=1, target_id=2, amount=2),
                   helpers.test_impact(target_type=1, target_id=2, amount=3),
                   helpers.test_impact(target_type=1, target_id=2, amount=4)]

        for impact in impacts:
            await operations.add_impacts([impact])

        found_impacts = await operations.last_target_impacts(objects.Object(1, 2), limit=2)

        impacts[2].time = found_impacts[1].time
        impacts[3].time = found_impacts[0].time

        self.assertEqual([impacts[3], impacts[2]], found_impacts)


class LastActorTargetImpactsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        await operations.add_impacts([helpers.test_impact(target_type=-1)])
        await operations.add_impacts([helpers.test_impact(actor_id=-1)])
        impacts = await operations.last_actor_target_impacts(actor=objects.Object(1, 2), target=objects.Object(2, 3), limit=100)
        self.assertEqual(len(impacts), 0)

    @test_utils.unittest_run_loop
    async def test_success(self):
        impacts = [helpers.test_impact(actor_type=1, actor_id=2, target_type=1, target_id=3, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=2, target_type=1, target_id=2, amount=2),
                   helpers.test_impact(actor_type=1, actor_id=2, target_type=2, target_id=2, amount=3),
                   helpers.test_impact(actor_type=2, actor_id=2, target_type=1, target_id=2, amount=4),
                   helpers.test_impact(actor_type=1, actor_id=2, target_type=1, target_id=2, amount=5),]

        for impact in impacts:
            await operations.add_impacts([impact])

        found_impacts = await operations.last_actor_target_impacts(actor=objects.Object(1, 2), target=objects.Object(1, 2), limit=100)

        impacts[1].time = found_impacts[1].time
        impacts[4].time = found_impacts[0].time

        self.assertEqual([impacts[4], impacts[1]], found_impacts)

    @test_utils.unittest_run_loop
    async def test_limit(self):
        impacts = [helpers.test_impact(actor_type=1, actor_id=2, target_type=1, target_id=3, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=2, target_type=1, target_id=2, amount=2),
                   helpers.test_impact(actor_type=1, actor_id=2, target_type=2, target_id=2, amount=3),
                   helpers.test_impact(actor_type=2, actor_id=2, target_type=1, target_id=2, amount=4),
                   helpers.test_impact(actor_type=1, actor_id=2, target_type=1, target_id=2, amount=5),]

        for impact in impacts:
            await operations.add_impacts([impact])

        found_impacts = await operations.last_actor_target_impacts(actor=objects.Object(1, 2), target=objects.Object(1, 2), limit=1)

        impacts[4].time = found_impacts[0].time

        self.assertEqual([impacts[4]], found_impacts)


class GetTargetsImpactsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        await operations.add_impacts([helpers.test_impact(target_type=-1)])
        impacts = await operations.get_targets_impacts([objects.Object(1, 2), objects.Object(3, 4)])
        self.assertEqual(impacts, [])

    @test_utils.unittest_run_loop
    async def test_has_impacts(self):

        all_impacts = [helpers.test_impact(target_type=1, target_id=10),
                       helpers.test_impact(target_type=1, target_id=20),
                       helpers.test_impact(target_type=2, target_id=10),
                       helpers.test_impact(target_type=2, target_id=30),

                       helpers.test_impact(target_type=1, target_id=10),
                       helpers.test_impact(target_type=1, target_id=20)]

        for impact in all_impacts:
            await operations.add_impacts([impact])

        all_impacts = await operations.last_impacts(limit=100)

        await operations.add_impacts([helpers.test_impact(target_type=-1)])
        impacts = await operations.get_targets_impacts([objects.Object(1, 10),
                                                        objects.Object(1, 20),
                                                        objects.Object(2, 30)])

        self.assertCountEqual(impacts,
                              [objects.TargetImpact(target=objects.Object(1, 10),
                                                    amount=all_impacts[-1].amount+all_impacts[-5].amount,
                                                    turn=max(all_impacts[-1].turn, all_impacts[-5].turn),
                                                    time=max(all_impacts[-1].time, all_impacts[-5].time)),
                               objects.TargetImpact(target=objects.Object(1, 20),
                                                    amount=all_impacts[-2].amount+all_impacts[-6].amount,
                                                    turn=max(all_impacts[-2].turn, all_impacts[-6].turn),
                                                    time=max(all_impacts[-2].time, all_impacts[-6].time)),
                               objects.TargetImpact(target=objects.Object(2, 30),
                                                    amount=all_impacts[-4].amount,
                                                    turn=all_impacts[-4].turn,
                                                    time=all_impacts[-4].time)])


class GetImpactersTargetRatingsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_impacts(self):
        await operations.add_impacts([helpers.test_impact(target_type=-1)])

        test_target = objects.Object(1, 2)

        target, rating = await operations.get_impacters_target_ratings(target=test_target,
                                                                       actor_types=[1, 2, 3],
                                                                       limit=100)
        self.assertEqual(target, test_target)
        self.assertEqual(rating, [])

    @test_utils.unittest_run_loop
    async def test_target_filter(self):
        impacts = [helpers.test_impact(actor_type=0, actor_id=10, target_type=100, target_id=1000, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=20, target_type=100, target_id=2000, amount=2),
                   helpers.test_impact(actor_type=3, actor_id=30, target_type=200, target_id=1000, amount=3),
                   helpers.test_impact(actor_type=1, actor_id=40, target_type=100, target_id=2000, amount=4),
                   helpers.test_impact(actor_type=0, actor_id=50, target_type=100, target_id=1000, amount=5),
                   helpers.test_impact(actor_type=2, actor_id=60, target_type=200, target_id=3000, amount=6),
                   helpers.test_impact(actor_type=0, actor_id=70, target_type=100, target_id=1000, amount=7)]

        await operations.add_impacts(impacts)

        test_target = objects.Object(100, 1000)

        target, rating = await operations.get_impacters_target_ratings(target=test_target,
                                                                       actor_types=[0, 1, 2, 3],
                                                                       limit=100)

        self.assertEqual(rating, [objects.ActorImpact(actor=objects.Object(0, 70),
                                                      target=test_target,
                                                      amount=7,
                                                      turn=impacts[-1].turn,
                                                      time=rating[0].time),
                                  objects.ActorImpact(actor=objects.Object(0, 50),
                                                      target=test_target,
                                                      amount=5,
                                                      turn=impacts[-3].turn,
                                                      time=rating[1].time),
                                  objects.ActorImpact(actor=objects.Object(0, 10),
                                                      target=test_target,
                                                      amount=1,
                                                      turn=impacts[-7].turn,
                                                      time=rating[2].time)])

    @test_utils.unittest_run_loop
    async def test_actor_types_filter(self):
        test_target = objects.Object(100, 1000)

        impacts = [helpers.test_impact(actor_type=0, actor_id=10, target_type=test_target.type, target_id=test_target.id, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=20, target_type=test_target.type, target_id=test_target.id, amount=2),
                   helpers.test_impact(actor_type=3, actor_id=30, target_type=test_target.type, target_id=test_target.id, amount=3),
                   helpers.test_impact(actor_type=1, actor_id=40, target_type=test_target.type, target_id=test_target.id, amount=4),
                   helpers.test_impact(actor_type=0, actor_id=50, target_type=test_target.type, target_id=test_target.id, amount=5),
                   helpers.test_impact(actor_type=2, actor_id=60, target_type=test_target.type, target_id=test_target.id, amount=6),
                   helpers.test_impact(actor_type=0, actor_id=70, target_type=test_target.type, target_id=test_target.id, amount=7)]

        await operations.add_impacts(impacts)

        target, rating = await operations.get_impacters_target_ratings(target=test_target,
                                                                       actor_types=[2, 3],
                                                                       limit=100)

        self.assertEqual(rating, [objects.ActorImpact(actor=objects.Object(2, 60),
                                                      target=test_target,
                                                      amount=6,
                                                      turn=impacts[-2].turn,
                                                      time=rating[0].time),
                                  objects.ActorImpact(actor=objects.Object(3, 30),
                                                      target=test_target,
                                                      amount=3,
                                                      turn=impacts[-5].turn,
                                                      time=rating[1].time)])

    @test_utils.unittest_run_loop
    async def test_limit(self):
        impacts = [helpers.test_impact(actor_type=0, actor_id=10, target_type=100, target_id=1000, amount=1),
                   helpers.test_impact(actor_type=1, actor_id=20, target_type=100, target_id=2000, amount=2),
                   helpers.test_impact(actor_type=3, actor_id=30, target_type=200, target_id=1000, amount=3),
                   helpers.test_impact(actor_type=1, actor_id=40, target_type=100, target_id=2000, amount=4),
                   helpers.test_impact(actor_type=0, actor_id=50, target_type=100, target_id=1000, amount=5),
                   helpers.test_impact(actor_type=2, actor_id=60, target_type=200, target_id=3000, amount=6),
                   helpers.test_impact(actor_type=0, actor_id=70, target_type=100, target_id=1000, amount=7)]

        await operations.add_impacts(impacts)

        test_target = objects.Object(100, 1000)

        target, rating = await operations.get_impacters_target_ratings(target=test_target,
                                                                       actor_types=[0, 1, 2, 3],
                                                                       limit=2)

        self.assertEqual(rating, [objects.ActorImpact(actor=objects.Object(0, 70),
                                                      target=test_target,
                                                      amount=7,
                                                      turn=impacts[-1].turn,
                                                      time=rating[0].time),
                                  objects.ActorImpact(actor=objects.Object(0, 50),
                                                      target=test_target,
                                                      amount=5,
                                                      turn=impacts[-3].turn,
                                                      time=rating[1].time)])


class GetImpactersRaringsTests(helpers.BaseTests):

    @test_utils.unittest_run_loop
    async def test_no_targets(self):
        impacts = [helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact()]

        await operations.add_impacts(impacts)

        ratings = await operations.get_impacters_ratings(targets=[],
                                                         actor_types=[impact.actor.type for impact in impacts],
                                                         limit=100)

        self.assertEqual(ratings, {})

    @test_utils.unittest_run_loop
    async def test_no_actor_types(self):
        impacts = [helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact()]

        await operations.add_impacts(impacts)

        ratings = await operations.get_impacters_ratings(targets=[impact.target for impact in impacts],
                                                         actor_types=[],
                                                         limit=100)

        self.assertEqual(ratings, {})

    @test_utils.unittest_run_loop
    async def test_success(self):
        impacts = [helpers.test_impact(actor_type=0, actor_id=0, target_type=1, target_id=10),
                   helpers.test_impact(actor_type=0, actor_id=1, target_type=1, target_id=20),
                   helpers.test_impact(actor_type=0, actor_id=2, target_type=1, target_id=20),
                   helpers.test_impact(actor_type=0, actor_id=3, target_type=2, target_id=10),
                   helpers.test_impact(actor_type=0, actor_id=4, target_type=2, target_id=10),
                   helpers.test_impact(actor_type=0, actor_id=5, target_type=2, target_id=10)]

        await operations.add_impacts(impacts)

        ratings = await operations.get_impacters_ratings(targets=[impact.target for impact in impacts] + [objects.Object(3, 30)],
                                                         actor_types=[impact.actor.type for impact in impacts],
                                                         limit=100)

        self.assertEqual(len(ratings), 4)

        self.assertEqual(len(ratings[objects.Object(1, 10)]), 1)
        self.assertEqual(len(ratings[objects.Object(1, 20)]), 2)
        self.assertEqual(len(ratings[objects.Object(2, 10)]), 3)
        self.assertEqual(len(ratings[objects.Object(3, 30)]), 0)


class ScaleImpactsTests(helpers.BaseTests):

    async def check_scale(self, target_types, scale):
        target_types = tuple(target_types)

        old_scaled_targets = await db.sql('''SELECT target_type, target_id, amount FROM targets_impacts
                                             WHERE target_type IN %(target_types)s''',
                                          {'target_types': target_types})

        old_unscaled_targets = await db.sql('''SELECT target_type, target_id, amount FROM targets_impacts
                                             WHERE target_type NOT IN %(target_types)s''',
                                            {'target_types': target_types})

        old_scaled_actors = await db.sql('''SELECT target_type, target_id, actor_type, actor_id, amount FROM actors_impacts
                                             WHERE target_type IN %(target_types)s''',
                                         {'target_types': target_types})

        old_unscaled_actors = await db.sql('''SELECT target_type, target_id, actor_type, actor_id, amount FROM actors_impacts,
                                             WHERE target_type NOT IN %(target_types)s''',
                                           {'target_types': target_types})

        await operations.scale_impacts(target_types=target_types, scale=scale)

        new_scaled_targets = await db.sql('''SELECT target_type, target_id, amount FROM targets_impacts
                                             WHERE target_type IN %(target_types)s''',
                                          {'target_types': target_types})

        new_unscaled_targets = await db.sql('''SELECT target_type, target_id, amount FROM targets_impacts
                                             WHERE target_type NOT IN %(target_types)s''',
                                            {'target_types': target_types})

        new_scaled_actors = await db.sql('''SELECT target_type, target_id, actor_type, actor_id, amount FROM actors_impacts
                                             WHERE target_type IN %(target_types)s''',
                                         {'target_types': target_types})

        new_unscaled_actors = await db.sql('''SELECT target_type, target_id, actor_type, actor_id, amount FROM actors_impacts,
                                             WHERE target_type NOT IN %(target_types)s''',
                                           {'target_types': target_types})

        self.assertCountEqual(old_unscaled_targets, new_unscaled_targets)
        self.assertCountEqual(old_unscaled_actors, new_unscaled_actors)

        for row in old_scaled_targets:
            round = math..cel
            row['amount'] = int(math.ceil(row['amount'] * scale, 0))

        for row in old_scaled_actors:
            row['amount'] = int(math.ceil(row['amount'] * scale, 0))

        self.assertCountEqual(old_scaled_targets, new_scaled_targets)
        self.assertCountEqual(old_scaled_actors, new_scaled_actors)

    @test_utils.unittest_run_loop
    async def test_empty_target_filter(self):
        impacts = [helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact()]

        await operations.add_impacts(impacts)

        await operations.scale_impacts(target_types=[], scale=0.5)

    @test_utils.unittest_run_loop
    async def test_has_targets(self):
        impacts = [helpers.test_impact(),
                   helpers.test_impact(),
                   helpers.test_impact()]

        await operations.add_impacts(impacts)

        await operations.scale_impacts(target_types=[impacts[0].target.type, impacts[2].target.type], scale=0.5)
        await operations.scale_impacts(target_types=[impacts[0].target.type, impacts[2].target.type], scale=10)

    @test_utils.unittest_run_loop
    async def test_no_targets(self):
        impacts = [helpers.test_impact(target_type=1),
                   helpers.test_impact(target_type=1),
                   helpers.test_impact(target_type=1)]

        await operations.add_impacts(impacts)

        await operations.scale_impacts(target_types=[2], scale=0.5)
        await operations.scale_impacts(target_types=[2], scale=10)
